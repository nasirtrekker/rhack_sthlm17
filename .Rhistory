library(twitteR)
library(tm)
library(wordcloud)
library(RColorBrewer)
install.packages("RColorBrewer")
install.packages("RColorBrewer")
setup_twitter_oauth(consumer_key, consumer_secret, access_token=NULL, access_secret=NULL)
source('~/.active-rstudio-document')
install.packages("twitteR", repos = "http://cran.us.r-project.org")
install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
install.packages("wordcloud", repos = "http://cran.us.r-project.org")
install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
install.packages("wordcloud", repos = "http://cran.us.r-project.org")
install.packages("wordcloud", repos = "http://cran.us.r-project.org")
source('~/Documents/NLP_tweeter_R/twitter_data.R')
source('~/Documents/NLP_tweeter_R/twitter_data.R')
# Search for topic in twitter
schibsted.tweets <- searchTwitter("schibsted", n = 2000, lang = "en")
schibsted.text = sapply(schibsted.tweets, function(x) x$getText())
source('~/Documents/NLP_tweeter_R/twitter_data.R')
install.packages("twitteR", repos = "http://cran.us.r-project.org")
install.packages("wordcloud", repos = "http://cran.us.r-project.org")
install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
install.packages("wordcloud", repos = "http://cran.us.r-project.org")
install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
schibsted.tweets <- searchTwitter("schibsted", n = 2000, lang = "en")
consumer_key = "pekrpiRFNvHW5PFhDtxLkyV6X"
consumer_secret = "floRiUQZh1786wMQbggwSEMulNtc1olHJIYNYk4sFwZ2HGICAd"
access_token = "1958422754-0tIA86QD9oNpYffFv1PrCG4RPcKKv9m2qWw3Rec"
access_secret = "TzClr5Z5CmU82nZiDYfdUGASuRHGv69V3Ou8lk5nwgmSd"
setup_twitter_oauth(consumer_key, consumer_secret, access_token=NULL, access_secret=NULL)
library(twitteR)
library(tm)
library(wordcloud)
library(RColorBrewer)
consumer_key = "pekrpiRFNvHW5PFhDtxLkyV6X"
consumer_secret = "floRiUQZh1786wMQbggwSEMulNtc1olHJIYNYk4sFwZ2HGICAd"
access_token = "1958422754-0tIA86QD9oNpYffFv1PrCG4RPcKKv9m2qWw3Rec"
access_secret = "TzClr5Z5CmU82nZiDYfdUGASuRHGv69V3Ou8lk5nwgmSd"
setup_twitter_oauth(consumer_key, consumer_secret, access_token=NULL, access_secret=NULL)
consumer_key = "pekrpiRFNvHW5PFhDtxLkyV6X"
consumer_secret = "floRiUQZh1786wMQbggwSEMulNtc1olHJIYNYk4sFwZ2HGICAd"
access_token = "1958422754-0tIA86QD9oNpYffFv1PrCG4RPcKKv9m2qWw3Rec"
access_secret = "TzClr5Z5CmU82nZiDYfdUGASuRHGv69V3Ou8lk5nwgmSd"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
schibsted.tweets <- searchTwitter("schibsted", n = 2000, lang = "en")
schibsted.text <- sapply(schibsted.tweets, function(x) x$getText())
# clean text data
schibsted.text <- iconv(schibsted.text, 'UTF-8', 'ASCII') # remove emoticons
schibsted.corpus <- Corpus(VectorSource(schibsted.text)) # create a corpus
# load library tm, tmap
library(tm)
library(tmap)
install.packages("tmap", repos = 'http://cran.us.r-project.org')
library(tmap)
# clean text data
schibsted.text <- iconv(schibsted.text, 'UTF-8', 'ASCII') # remove emoticons
schibsted.corpus <- Corpus(VectorSource(schibsted.text)) # create a corpus
schibsted.tweets <- searchTwitter("schibsted", n = 2000, lang = "en")
schibsted.text <- sapply(schibsted.tweets, function(x) x$getText())
library(tm)
library(tmap)
schibsted.text <- iconv(schibsted.text, 'UTF-8', 'ASCII') # remove emoticons
schibsted.corpus <- Corpus(VectorSource(schibsted.text)) # create a corpus
install.packages("http://cran.r-project.org/bin/windows/contrib/3.0/tm_0.5-10.zip",repos=NULL)
library(tm)
schibsted.corpus <- Corpus(VectorSource(schibsted.text)) # create a corpus
library(wordcloud)
schibsted.corpus <- Corpus(VectorSource(schibsted.text)) # create a corpus
load("~/Documents/textminingR/twittertextmining/twittertextmining.Rproj")
clar
source('~/Documents/machinelearningR/anavidya/7packaes.R')
install.packages("dplyr","datasets")
install.packages("dplyr", "datasets")
source('~/Documents/machinelearningR/anavidya/7packaes.R')
mydata <-mtcars
source('~/Documents/machinelearningR/anavidya/7packaes.R')
head(mtcars)
mynewdata <- tbl_df(mydata)
myirisdata <- tbl_df(iris)
library("dplyr")
data("mtcars")
data("iris")
mydata <-mtcars
head(mtcars)
mynewdata <- tbl_df(mydata)
myirisdata <- tbl_df(iris)
mynewdata
myirisdata
filter(mynewdata, cyl >4 & gear >4)
fileter(mynewdata, cyl >4)
filter(mynewdata, cyl >4)
filter(myirisdata, Species)
filter(myirisdata, Species %in% c('setosa', 'virginia'))
select(mynewdata, cyl,mpg,hp)
select(mynewdata, -cyl)
select(mynewdata, -cyl, -vs, -am)
mynewdata %>%
select(cyl,wt, gear)%>%
filter(wt >2)
installÂ¨install.packages("biobase")
install.packages("biobase")
mynewdata %>%
select(cyl,wt, gear)%>%
filter(wt >2)
mynewdata%>%
select(cyl,wt,gear)%<%
arrage(wt)
mynewdata%>%
select(cyl,wt,gear)%>%
arrage(wt)
mynewdata%>%
select(cyl,wt,gear)%>%
arrange(wt)
mynewdata%>%
select(cyl, wt, gear)%>%
arrange(desc(wt))
mynewdata %>%
select(mpg,cyl)%>%
mutate(newvariable = mpg*cyl)
mynewdata %>%
select(mpg,cyl)%>%
mutate(newvariable = mpg*cyl)
myirisdata%>%
group_by(Species)%>%
summarise(Average = mean(spal.length, na.rm = TRUE))
myirisdata%>%
group_by(Species)%>%
summarise(Average = mean(sepal.length, na.rm = TRUE))
myirisdata%>%
group_by(Species)%>%
summarise(Average = mean(sepal.length, na.rm = TRUE))
myirisdata %>%
group_by(Species)%>%
summarise(Average = mean(sepal.length, na.rm = TRUE))
myirisdata%>%
group_by(Species)%>%
summarise(Average = mean(sepal.length, na.rm = TRUE))
myirisdata%>%
group_by(Species)%>%
summarise(Average = mean(Sepal.length, na.rm = TRUE))
myirisdata%>%
group_by(Species)%>%
summarise(Average = mean(Sepal.length, na.rm = TRUE))
debugSource('~/Documents/machinelearningR/anavidya/7packaes.R')
install.packages("dplyr", "datasets")
myirisdata%>%
group_by(Species)%>%
summarise(Average = mean(Sepal.length, na.rm = TRUE))
install.packages("dplyr","datasets")
data("mtcars")
data("iris")
mydata <-mtcars
head(mtcars)
mynewdata <- tbl_df(mydata)
myirisdata <- tbl_df(iris)
mynewdata
myirisdata
filter(mynewdata, cyl >4 & gear >4)
filter(mynewdata, cyl >4)
filter(myirisdata, Species %in% c('setosa', 'virginia'))
select(mynewdata, cyl,mpg,hp)
select(mynewdata, -cyl)
mynewdata %>%
select(cyl,wt, gear)%>%
filter(wt >2)
mynewdata%>%
select(cyl,wt,gear)%>%
arrange(wt)
mynewdata%>%
select(cyl, wt, gear)%>%
arrange(desc(wt))
mynewdata %>%
select(mpg,cyl)%>%
mutate(newvariable = mpg*cyl)
myirisdata%>%
group_by(Species)%>%
summarise(Average = mean(Sepal.length, na.rm = TRUE))
library("dplyr")
data("mtcars")
data("iris")
mydata <-mtcars
head(mtcars)
mynewdata <- tbl_df(mydata)
myirisdata <- tbl_df(iris)
mynewdata
myirisdata
filter(mynewdata, cyl >4 & gear >4)
filter(mynewdata, cyl >4)
filter(myirisdata, Species %in% c('setosa', 'virginia'))
select(mynewdata, cyl,mpg,hp)
select(mynewdata, -cyl)
mynewdata %>%
select(cyl,wt, gear)%>%
filter(wt >2)
mynewdata%>%
select(cyl,wt,gear)%>%
arrange(wt)
mynewdata%>%
select(cyl, wt, gear)%>%
arrange(desc(wt))
mynewdata %>%
select(mpg,cyl)%>%
mutate(newvariable = mpg*cyl)
myirisdata%>%
group_by(Species)%>%
summarise(Average = mean(Sepal.length, na.rm = TRUE))
myirisdata
myirisdata%>%
group_by(Species)%>%
summarise(Average = mean(Sepal.Length, na.rm = TRUE))
myirisdata %>%
group_by(Species)%>%
summarise_each(funs(mean, n(), Sepal.Length, Sepal.Width))
myirisdata %>%
group_by(Species)%>%
summarise_all(funs(mean, n(), Sepal.Length, Sepal.Width))
myirisdata %>%
group_by(Species)%>%
summarise_all(funs(mean, n()), Sepal.Length, Sepal.Width))
myirisdata %>%
group_by(Species)%>%
summarise_all(funs(mean, n()), Sepal.Length, Sepal.Width)
myirisdata %>%
group_by(Species)%>%
summarise_all(funs(mean, n()), Sepal.Length, Sepal.Width)
myirisdata %>%
group_by(Species)%>%
summarise_each(funs(mean, n()), Sepal.Length, Sepal.Width)
mynewdata %>%
rename(miles = mpg)
data("airquality")
mydata <- airquality
head(airquality)
data("iris")
myiris <- iris
library(data.table)
install.packages("data.table")
library(data.table)
mydata
myiris <-data.table(myiris)
myiris
mydata[2:4,]
myris[Species== "setosa"]
myiris[Species== "setosa"]
myiris[Species %in% c('setosa', 'virginica')]
mydata[,Temp]
mydata[,Temp]
mydata <- data.table(mydata)
mydata[,Temp]
mydata[,sum(Ozone, ra.rm = TRUE)]
mydata <- data.table(mydata)
mydata[,Temp]
mydata[, .(Temp,Month)]
mydata[,sum(Ozone, ra.rm = TRUE)]
mydata[,sum(Ozone, na.rm = TRUE)]
mydata[,.(sum(Ozone, na.rm = TRUE), sd(Ozone, na.rm = TRUE))]
myiris[,{print(Sepal.Length)}]
plot(Sepal.Width)
myiris[,{print(Sepal.Length)}]
plot(Sepal.Width)
NULL}]
myiris[,{print(Sepal.Length)
plot(Sepal.Width)
NULL}]
myiris[,.(sepalsum = sum(Sepal.Length)), by=Species]
setkey(myiris,Species)
myiris['setosa']
myiris[c('setosa', 'virginia')]
install.packages("ggplot2")
library(ggplot2)
install.packages("gridExtra")
library(gridExtra)
df <- ToothGrowth
dif$dose <- as.factor(df$dose)
df$dose <- as.factor(df$dose)
head(df)
head(df)
bp <- ggplot(df, aes(x = dose, y = len, color = dose)) + geom_boxplot() + theme(legend.position = 'none')
bp
bp + background_grid(major = 'xy', minor = 'none')
bp + background_grid(major = 'xy', minor = 'none')
df <- ToothGrowth
df$dose <- as.factor(df$dose)
head(df)
bp <- ggplot(df, aes(x = dose, y = len, color = dose)) + geom_boxplot() + theme(legend.position = 'none')
bp
bp + background_grid(major = 'xy', minor = 'none')
bp + background_grid(major = 'xy', minor = 'none')
bp + background_grid(major = "xy", minor = 'none')
install.packages("gridExtra")
library(gridExtra)
install.packages('Biobase')
library(Biobase)
df <- ToothGrowth
df$dose <- as.factor(df$dose)
head(df)
bp <- ggplot(df, aes(x = dose, y = len, color = dose)) + geom_boxplot() + theme(legend.position = 'none')
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("gridExtra")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("gridExtra")
library(gridExtra)
df <- ToothGrowth
df$dose <- as.factor(df$dose)
head(df)
bp <- ggplot(df, aes(x = dose, y = len, color = dose)) + geom_boxplot() + theme(legend.position = 'none')
bp
bp + background_grid(major = "xy", minor = 'none')
bp <- ggplot(df, aes(x = dose, y = len, color = dose)) + geom_boxplot() + theme(legend.position = 'none')
bp
sp <- ggplot(mpg, aes(x = cty, y = hwy, color = factor(cyl)))+geom_point(size = 2.5)
bp <- ggplot(df, aes(x = dose, y = len, color = dose)) + geom_boxplot() + theme(legend.position = 'none')
bp
sp <- ggplot(mpg, aes(x = cty, y = hwy, color = factor(cyl)))+geom_point(size = 2.5)
sp <- ggplot(mpg, aes(x = cty, y = hwy, color = factor(cyl)))+geom_point(size = 2.5)
source('~/Documents/machinelearningR/anavidya/7packaes.R')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("gridExtra")
install.packages("gridExtra")
library(gridExtra)
df <- ToothGrowth
df$dose <- as.factor(df$dose)
head(df)
bp <- ggplot(df, aes(x = dose, y = len, color = dose)) + geom_boxplot() + theme(legend.position = 'none')
bp
bp
sp <- ggplot(mpg, aes(x = cty, y = hwy, color = factor(cyl)))+geom_point(size = 2.5)
sp <- ggplot(mpg, aes(x = cty, y = hwy, color = factor(cyl)))+geom_point(size = 2.5)
bp <- ggplot(diamonds, aes(clarity, fill = cut)) + geom_bar() +theme(axis.text.x = element_text(angle = 70, vjust = 0.5))
bp <- ggplot(diamonds, aes(clarity, fill = cut)) + geom_bar() +theme(axis.text.x = element_text(angle = 70, vjust = 0.5))
bp <- ggplot(diamonds, aes(clarity, fill = cut)) + geom_bar() +theme(axis.text.x = element_text(angle = 70, vjust = 0.5))
bp <- ggplot(diamonds, aes(clarity, fill = cut)) + geom_bar() +theme(axis.text.x = element_text(angle = 70, vjust = 0.5))
sp
bp
plot_grid(sp,bp, labels=c('A','B'), ncol=2, nrow=1)
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 0.25, fill = 'steelblue')+scale_x_continuous(breaks=seq(0,3, by=0.5))
ID <- c(1,2,3,4,5)
Names <- c('Joseph','Matrin','Joseph','James','Matrin')
DateofBirth <- c(1993,1992,1993,1994,1992)
Subject<- c('Maths','Biology','Science','Psycology','Physics')
data.table(thisdata)
thisdata <- data.frame(ID, Names, DateofBirth, Subject)
data.table(thisdata)
install.packages('reshape2')
install.packages('reshape2')
library(reshape2)
mt <- melt(thisdata, id=(c('ID','Names')))
mt
mt <- melt(thisdata, id=(c('ID','Names')))
mt
install.packages("readr")
library(readr)
read_csv('test.csv',col_names = TRUE)
library(readr)
read_csv('test.csv',col_names = TRUE)
data(test.csv)
data('test.csv')
read_csv('test.csv',col_names = TRUE)
library(readr)
read_csv('test.csv',col_names = TRUE)
read_csv('test.csv',col_names = TRUE)
read_csv("iris.csv", col_types = list(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
install.packages("tidyr")
library("tidyr")
library("tidyr")
names <- c('A','B','C','D','E','A','B')
weight <- c(55,49,76,71,65,44,34)
age <- c(21,20,25,29,33,32,38)
Class <- c('Maths','Science','Social','Physics','Biology','Economics','Accounts')
tdata <- data.frame(names,age,weight,Class)
tdata <- data.frame(names,age,weight,Class)
tdata
tdata
tdata
long_t <- tdata %>% gather(key, Value, weight:Class)
long_t <- tdata %>% gather(key, Value, weight:Class)
long_t
install.packages("lubridate")
library(lubridate)
now()
n_time <- now()
n_time <- now()
n_time
n_update <- update(n_time, year = 2013, month = 10)
n_update
setwd("~/Documents/rhackathon")
suppressPackageStartupMessages(library(reshape))
install.packages("anytime","dplyr","ggplot2","dplyr","plyr","JSNONIO","tm","SnowballC","wordcloud","igraph","reshape")
install.packages("Reshape")
df <- read.csv("../input/ted_main.csv")
df <- read.csv("ted_main.csv")
colnames(df)
df = df[, c('name', 'title', 'description', 'main_speaker', 'speaker_occupation', 'num_speaker', 'duration', 'event', 'film_date', 'published_date', 'comments', 'tags', 'languages', 'ratings', 'related_talks', 'url', 'views')]
df$film_date = anydate(df$film_date)
df$published_date = anydate(df$published_date)
head(df)
pop_talks = df[, c("title", "main_speaker", "views", "film_date")] %>% arrange(desc(views)) %>% head(15)
pop_talks = df[, c("title", "main_speaker", "views", "film_date")] %>% arrange(desc(views)) %>% head(15)
speaker_df <- data.frame(table(df$main_speaker))
speaker_df <- data.frame(table(df$main_speaker))
colnames(speaker_df) <- c("main_speaker", "appearances")
speaker_df <- speaker_df %>% arrange(desc(appearances))
install.packages("magrittr")
library(magrittr)
colnames(speaker_df) <- c("main_speaker", "appearances")
speaker_df <- speaker_df %>% arrange(desc(appearances))
colnames(speaker_df) <- c("main_speaker", "appearances")
speaker_df <- speaker_df %>% arrange(desc(appearances))
suppressPackageStartupMessages(library(dplyr))
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
install.packages("plyr")
install.packages("plyr")
library("plyr")
speaker_df <- data.frame(table(df$main_speaker))
colnames(speaker_df) <- c("main_speaker", "appearances")
speaker_df <- speaker_df %>% arrange(desc(appearances))
head(speaker_df, 10)
df_common_occ <- df[df$speaker_occupation %in% head(occupation_df$occupation, 10), ]
ggplot(df_common_occ, aes(x=speaker_occupation, y=views, fill=speaker_occupation)) + geom_boxplot() +
guides(fill=FALSE)
install.packages("ggplot")
library("ggplot")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
df_common_occ <- df[df$speaker_occupation %in% head(occupation_df$occupation, 10), ]
ggplot(df_common_occ, aes(x=speaker_occupation, y=views, fill=speaker_occupation)) + geom_boxplot() +
guides(fill=FALSE)
df_common_occ <- df[df$speaker_occupation %in% head(occupation_df$occupation, 10), ]
occupation_df <- data.frame(table(df$speaker_occupation))
colnames(occupation_df) <- c("occupation", "appearances")
occupation_df <- occupation_df %>% arrange(desc(appearances))
head(occupation_df, 10)
ggplot(head(occupation_df,10), aes(x=reorder(occupation, appearances),
y=appearances, fill=occupation)) +
geom_bar(stat="identity") + guides(fill=FALSE)
df_common_occ <- df[df$speaker_occupation %in% head(occupation_df$occupation, 10), ]
df_common_occ <- df[df$speaker_occupation %in% head(occupation_df$occupation, 10), ]
ggplot(df_common_occ, aes(x=speaker_occupation, y=views, fill=speaker_occupation)) + geom_boxplot() +
guides(fill=FALSE)
table(df$num_speaker)
df[df[,'num_speaker'] == 5, c('title', 'description', 'main_speaker', 'event')]
get_funny <- function(s){
x <- fromJSON(as.character(s))
for(i in 1:length(x)){
if(x[[i]]$id==7){
return(x[[i]]$count)
}
}
return(-1)
}
get_jawdrop <- function(s){
x <- fromJSON(as.character(s))
for(i in 1:length(x)){
if(x[[i]]$id==23){
return(x[[i]]$count)
}
}
return(-1)
}
get_beautiful <- function(s){
x <- fromJSON(as.character(s))
for(i in 1:length(x)){
if(x[[i]]$id==1){
return(x[[i]]$count)
}
}
return(-1)
}
get_confusing <- function(s){
x <- fromJSON(as.character(s))
for(i in 1:length(x)){
if(x[[i]]$id==2){
return(x[[i]]$count)
}
}
return(-1)
}
df$funny <- sapply(df$ratings, get_funny)
install.packages("fromJSON")
install.packages("rJSON")
install.packages("rjson")
install.packages("rjson")
library("rjson")
df$funny <- sapply(df$ratings, get_funny)
df$beautiful <- sapply(df$ratings, get_beautiful)
texts <- df3$transcript
corpus <- Corpus(VectorSource(texts))
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords('english'))
corpus <- tm_map(corpus, stemDocument)
corpus <- tm_map(corpus, removeWords, c("and", "this", "there"))
corpus <- Corpus(VectorSource(corpus))
